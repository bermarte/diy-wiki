{"version":3,"sources":["util.js","ViewPage.js","EditPage.js","AllPages.js","AllTagsPage.js","TagPage.js","App.js","serviceWorker.js","index.js"],"names":["TAG_RE","renderMarkdown","body","html","sanitize","marked","replace","ViewPage","props","state","pageState","this","_loadPage","prevProps","match","params","slug","fetch","res","json","status","setState","errorMessage","message","className","dangerouslySetInnerHTML","__html","to","React","Component","EditPage","_onChange","bind","_onSave","headers","Accept","method","JSON","stringify","history","push","value","onChange","e","target","onClick","AllPages","pages","map","page","AllTagsPage","tags","tag","TagPage","console","log","App","href","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c223e79e.chunk.js","sourcesContent":["import marked from 'marked';\nimport { sanitize } from 'dompurify';\n\nconst TAG_RE = /#(\\w+)/g;\n\nexport function renderMarkdown(body) {\n  let html = sanitize(marked(body));\n  html = html.replace(TAG_RE, '<a class=\"tag\" href=\"/tags/$1\">#$1</a>');\n  return html;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { renderMarkdown } from './util';\n\nconst PAGE_STATE_LOADING = 'loading';\nconst PAGE_STATE_OK = 'ok';\nconst PAGE_STATE_ERROR = 'error';\n\nexport default class ViewPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pageState: PAGE_STATE_LOADING };\n  }\n\n  componentDidMount() {\n    this._loadPage();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.slug !== this.props.match.params.slug) {\n      this._loadPage();\n    }\n  }\n\n  async _loadPage() {\n    const { slug } = this.props.match.params;\n    const res = await fetch(`/api/page/${slug}`);\n    const json = await res.json();\n    if (json.status && json.status === 'ok') {\n      const body = json.body;\n      const html = renderMarkdown(body);\n      this.setState({ pageState: PAGE_STATE_OK, body, html });\n    } else {\n      const errorMessage = json.message && json.message;\n      this.setState({ pageState: PAGE_STATE_ERROR, errorMessage });\n    }\n  }\n\n  render() {\n    const { slug } = this.props.match.params;\n    const { pageState, html, errorMessage } = this.state;\n    return (\n      <div className=\"page\">\n        {pageState === PAGE_STATE_LOADING && (\n          <div className=\"container page__loading\">Loading...</div>\n        )}\n        {pageState === PAGE_STATE_OK && (\n          <div className=\"container\">\n            <div className=\"page__body\" dangerouslySetInnerHTML={{ __html: html }} />\n            <div className=\"page__actions\">\n              <Link className=\"btn\" to={`/edit/${slug}`}>\n                Edit\n              </Link>\n            </div>\n          </div>\n        )}\n        {pageState === PAGE_STATE_ERROR && (\n          <div className=\"container\">\n            <p className=\"page__error\">{errorMessage}</p>\n            <div className=\"page__actions\">\n              <Link className=\"btn\" to={`/edit/${slug}`}>\n                Create\n              </Link>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { renderMarkdown } from './util';\n\nconst PAGE_STATE_LOADING = 'loading';\nconst PAGE_STATE_OK = 'ok';\nconst PAGE_STATE_ERROR = 'error';\n\nconst NEW_PAGE_TEXT = '# Your New Page\\n\\nWrite whatever you like here.';\n\nexport default class EditPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pageState: PAGE_STATE_LOADING };\n    this._onChange = this._onChange.bind(this);\n    this._onSave = this._onSave.bind(this);\n  }\n\n  async componentDidMount() {\n    const { slug } = this.props.match.params;\n    const res = await fetch(`/api/page/${slug}`);\n    const json = await res.json();\n    if (json.status && json.status === 'ok') {\n      const body = json.body;\n      const html = renderMarkdown(body);\n      this.setState({ pageState: PAGE_STATE_OK, body, html });\n    } else {\n      // const errorMessage = json.message && json.message;\n      const body = NEW_PAGE_TEXT;\n      const html = renderMarkdown(body);\n      this.setState({ pageState: PAGE_STATE_OK, body, html });\n    }\n  }\n\n  _onChange(body) {\n    const html = renderMarkdown(body);\n    this.setState({ body, html });\n  }\n\n  async _onSave() {\n    const { slug } = this.props.match.params;\n    const { body } = this.state;\n    const res = await fetch(`/api/page/${slug}`, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({ body })\n    });\n    const json = await res.json();\n    if (json.status && json.status === 'ok') {\n      // Redirect\n      this.props.history.push(`/wiki/${slug}`);\n    } else {\n      // Show an error.\n    }\n  }\n\n  render() {\n    const { slug } = this.props.match.params;\n    const { pageState, body, html, errorMessage } = this.state;\n    return (\n      <div className=\"page\">\n        {pageState === PAGE_STATE_LOADING && (\n          <div className=\"container page__loading\">Loading...</div>\n        )}\n        {pageState === PAGE_STATE_OK && (\n          <div className=\"container\">\n            <div className=\"editor\">\n              <textarea\n                className=\"editor__textarea\"\n                value={body}\n                onChange={e => this._onChange(e.target.value)}\n              />\n              <div className=\"editor__preview\" dangerouslySetInnerHTML={{ __html: html }} />\n            </div>\n            <div className=\"page__actions\">\n              <button className=\"btn\" onClick={this._onSave}>\n                Save\n              </button>\n              or &nbsp; <Link to={`/wiki/${slug}`}>Cancel</Link>\n            </div>\n          </div>\n        )}\n        {pageState === PAGE_STATE_ERROR && (\n          <div className=\"container page__error\">{errorMessage}</div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PAGE_STATE_LOADING = 'loading';\nconst PAGE_STATE_OK = 'ok';\nconst PAGE_STATE_ERROR = 'error';\n\nexport default class AllPages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pageState: PAGE_STATE_LOADING, pages: [] };\n  }\n\n  async componentDidMount() {\n    const res = await fetch('/api/pages/all');\n    const json = await res.json();\n    if (json.status && json.status === 'ok') {\n      const pages = json.pages;\n      this.setState({ pageState: PAGE_STATE_OK, pages });\n    } else {\n      this.setState({\n        pageState: PAGE_STATE_ERROR,\n        errorMessage: 'Error when loading pages'\n      });\n    }\n  }\n\n  render() {\n    const { pageState, pages, errorMessage } = this.state;\n\n    return (\n      <div className=\"container page\">\n        {pageState === PAGE_STATE_OK && (\n          <div className=\"page__body\">\n            <h1> All Pages</h1>\n            <ul>\n              {pages.map(page => (\n                <li>\n                  <Link to={`/wiki/${page}`}>{page}</Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {pageState === PAGE_STATE_ERROR && <p className=\"page__error\">{errorMessage}</p>}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PAGE_STATE_LOADING = 'loading';\nconst PAGE_STATE_OK = 'ok';\nconst PAGE_STATE_ERROR = 'error';\n\nexport default class AllTagsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pageState: PAGE_STATE_LOADING, tags: [] };\n  }\n\n  async componentDidMount() {\n    const res = await fetch('/api/tags/all');\n    const json = await res.json();\n    if (json.status && json.status === 'ok') {\n      const tags = json.tags;\n      this.setState({ pageState: PAGE_STATE_OK, tags });\n    } else {\n      this.setState({\n        pageState: PAGE_STATE_ERROR,\n        errorMessage: 'Error when loading tags'\n      });\n    }\n  }\n\n  render() {\n    const { pageState, tags, errorMessage } = this.state;\n\n    return (\n      <div className=\"container page\">\n        {pageState === PAGE_STATE_OK && (\n          <div className=\"page__body\">\n            <h1>All Tags</h1>\n            <ul>\n              {tags.map(tag => (\n                <li>\n                  <Link to={`/tags/${tag}`}>#{tag}</Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {pageState === PAGE_STATE_ERROR && <p className=\"page__error\">{errorMessage}</p>}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PAGE_STATE_LOADING = 'loading';\nconst PAGE_STATE_OK = 'ok';\nconst PAGE_STATE_ERROR = 'error';\n\nexport default class TagPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { pageState: PAGE_STATE_LOADING, tag: null, pages: [] };\n  }\n\n  async componentDidMount() {\n    const { tag } = this.props.match.params;\n    const res = await fetch(`/api/tags/${tag}`);\n    const json = await res.json();\n    if (json.status && json.status === 'ok') {\n      const pages = json.pages;\n      console.log(json);\n      this.setState({ pageState: PAGE_STATE_OK, tag, pages });\n    } else {\n      this.setState({\n        pageState: PAGE_STATE_ERROR,\n        errorMessage: 'Error when loading tags'\n      });\n    }\n  }\n\n  render() {\n    const { pageState, tag, pages, errorMessage } = this.state;\n    console.log(this.state);\n    return (\n      <div className=\"container page\">\n        {pageState === PAGE_STATE_OK && (\n          <div className=\"page__body\">\n            <h1>All pages with #{tag}</h1>\n            <ul>\n              {pages.map(slug => (\n                <li>\n                  <Link to={`/wiki/${slug}`}>{slug}</Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {pageState === PAGE_STATE_ERROR && <p className=\"page__error\">{errorMessage}</p>}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom';\n\nimport ViewPage from './ViewPage';\nimport EditPage from './EditPage';\nimport AllPages from './AllPages';\nimport AllTagsPage from './AllTagsPage';\nimport TagPage from './TagPage';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <Router>\n        <header>\n          <div className=\"container header__container\">\n            <h1 className=\"header__title\">\n              <a href=\"/wiki/home\">Wiki</a>\n            </h1>\n            <nav className=\"header__nav\">\n              <Link to=\"/wiki/home\">Home</Link>\n              <Link to=\"/wiki/about\">About</Link>\n            </nav>\n          </div>\n        </header>\n        <main>\n          <Switch>\n            <Route path=\"/wiki/:slug\" component={ViewPage} />\n            <Route path=\"/edit/:slug\" component={EditPage} />\n            <Route path=\"/all\" component={AllPages} />\n            <Route path=\"/tags/:tag\" component={TagPage} />\n            <Route path=\"/tags\" component={AllTagsPage} />\n            <Route path=\"/\">\n              <Redirect to=\"/wiki/home\" />\n            </Route>\n          </Switch>\n        </main>\n        <footer>\n          <div className=\"container footer__container\">\n            <Link to=\"/wiki/home\">Home</Link>\n            <Link to=\"/wiki/about\">About</Link>\n            <Link to=\"/all\">All Pages</Link>\n            <Link to=\"/tags\">All Tags</Link>\n          </div>\n        </footer>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}